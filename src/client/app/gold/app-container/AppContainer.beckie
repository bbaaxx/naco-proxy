// @flow-
import xs from 'xstream';
import { div, p } from '@cycle/dom';
import { isolateExplicit } from '../../redstone/helpers/cycle-components';

import MasterLayout from '../master-layout';

const INITIAL_STATE = {
  count: 0,
  scrollPos: 0,
  masterLayout: 0,
};
const initialReducer = () => ({
  count: 0,
  scrollPos: 0,
  // masterLayout: 0,
});
const scrollReducer = scrollPos => prev => ({
  ...prev,
  scrollPos,
});
const timerReducer = prev => ({ ...prev, count: prev.count + 1 });

function intent(sources) {
  // const masterLayoutSinks = isolateExplicit(
  //   MasterLayout,
  //   'masterLayout',
  //   sources,
  //   {
  //     className: 'masterLayout',
  //     content: xs.of({ DOM: p('Main Content Placeholdler') }),
  //   },
  // );

  return {
    actions: {
      state$: sources.ONION.state$,
      scroll$: sources.SCROLL,
    },
    // components: { masterLayoutSinks },
  };
}

function model({ actions, components }) {
  const { state$, scroll$ } = actions;
  // const { masterLayoutSinks } = components;
  const initialReducer$ = xs.of(initialReducer);
  const scrollReducer$ = scroll$.map(scrollReducer);
  const timerReducer$ = xs.periodic(1000).mapTo(timerReducer);

  const reducers$ = xs.merge(initialReducer$, timerReducer$, scrollReducer$);

  return {
    state$,
    reducers$,
    // components,
    // request$: masterLayoutSinks.HTTP,
    // log$: masterLayoutSinks.LOG,
    // scroll$: masterLayoutSinks.SCROLL,
  };
}

function view(state$, components) {
  // const masterLayoutVdom$ = components.masterLayoutSinks.DOM;
  // return xs
  //   .combine(state$, masterLayoutVdom$)
  return state$.map(({ count, scrollPos }) =>
    div('.app-container', [
      // div('.app-wrap', [masterLayout]),
      div('.console-wrap', [
        p(`Count is: ${count}`),
        p(`SCROLL is at: ${scrollPos}`),
      ]),
    ]),
  );
}

export default function(sources) {
  const { state$, scroll$, reducers$, log$, components } = model(
    intent(sources),
  );
  return {
    DOM: view(state$, components),
    // SCROLL: scroll$,
    // Log: log$,
    // HTTP: request$,
    ONION: reducers$,
  };
}
